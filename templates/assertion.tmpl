entity:::
    Library ieee; --IEEE
    use ieee.std_logic_1164.all;  --logic vector definitions
    use ieee.numeric_std.all; -- arithmetic operations on logic vectors
    -- Entity declaration with generics
    entity EntityName is
        generic (
            n : integer := 16; -- Default value 16
            m : integer := 32  -- Default value 32
        );
        port (
            FirstPort  : in  std_logic;                        -- Single bit input
            SecondPort : out std_logic;                        -- Single bit output
            ThirdPort  : inout std_logic_vector(n-1 downto 0)  -- Bi-directional bus with size defined by generic 'n'
        );
    end EntityName;

    -- Architecture declaration
    architecture ArchitectureName of EntityName is

        -- Signal declarations
        signal wire : std_logic;                             -- Single wire signal
        signal bus : std_logic_vector(m-1 downto 0);         -- Bus signal with size defined by generic 'm'

    begin

        -- Behavior and assignments go here
        -- Example: Simple assignment (not practical, just illustrative)
        wire <= FirstPort;
        SecondPort <= wire;
        bus <= (others => '0'); -- Initialize bus to all zeros

    end ArchitectureName;


process:::
    process(clk)
    begin
        if rising_edge(clk) then  -- Triggering on the rising edge of the clock
            if rst = '1' then   -- Checking for a synchronous reset
                data_out <= (others => '0');  -- Reset data output to all zeros
            else
                data_out <= data_in;  -- Transfer input to output if not reset
            end if;
        end if;
    end process;



if:::
    if <condition-A> then
        -- do something
    elsif <condition-B> then
        -- do something
    else
        -- Default condition
    end if;


case:::
    case state is
        when IDLE =>
            -- IDLE state actions
        when RUNNING =>
            -- RUNNING state actions
        when ERROR =>
            -- ERROR state actions
        when others =>
            -- Default actions
    end case;

when:::
    C <= A when SEL = "00" else
         B when SEL = "01" else
         '0';    


doc:::
    --doc init
    --
    --#### Description
    --Provide a detailed description of the module here. Explain its purpose, functionality, and any relevant background information.
    --
    --#### Ports
    --| Port Name    | Direction | Width | Description                               |
    --|--------------|-----------|-------|-------------------------------------------|
    --| `port1`      | input     | 1     | Description of port1                      |
    --| `port2`      | output    | 8     | Description of port2                      |
    --| `port3`      | inout     | 16    | Description of port3                      |
    --
    --
    --#### Parameters
    --| Parameter Name | Default Value | Description                               |
    --|----------------|---------------|-------------------------------------------|
    --| `PARAM1`       | 10            | Description of PARAM1                     |
    --| `PARAM2`       | 4             | Description of PARAM2                     |
    --
    --
    --#### Internal Signals
    --| Signal Name    | Width | Description                               |
    --|----------------|-------|-------------------------------------------|
    --| `signal1`      | 1     | Description of signal1                    |
    --| `signal2`      | 8     | Description of signal2                    |
    --
    --#### Submodules
    --| Submodule Name | Instance Name | Description                               |
    --|----------------|---------------|-------------------------------------------|
    --| `submodule1`   | `instance1`   | Description of submodule1                 |
    --| `submodule2`   | `instance2`   | Description of submodule2                 |
    --
    --#### Functionality
    --Provide a detailed description of the module's functionality. Include information about how it processes inputs, generates outputs, and any internal operations or state changes.
    --
    --#### State Machine (if applicable)
    --Describe the state machine used within the module, including:::
    --- States
    --- Transitions
    --- Conditions for transitions
    --- Actions performed in each state
    --
    --#### Timing Diagrams
    --Include any relevant timing diagrams that illustrate the module's operation. Provide explanations for each diagram.
    --
    --doc end